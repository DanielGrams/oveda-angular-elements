/**
 * Oveda API
 * This API provides endpoints to interact with the Oveda data.
 *
 * OpenAPI spec version: 0.1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { EventCategoryRef } from './eventCategoryRef';
import { Image } from './image';
import { OrganizationRef } from './organizationRef';
import { OrganizerRef } from './organizerRef';
import { PlaceRef } from './placeRef';

export interface Event {
  /**
   * If the event is accessible for free.
   */
  accessibleForFree?: boolean;
  /**
   * The minimum age that participants should be.
   */
  ageFrom?: number;
  /**
   * The maximum age that participants should be.
   */
  ageTo?: number;
  /**
   * Choose how people can attend the event.
   */
  attendanceMode?: Event.AttendanceModeEnum;
  /**
   * If the event is booked up or sold out.
   */
  bookedUp?: boolean;
  categories?: Array<EventCategoryRef>;
  readonly createdAt?: Date;
  /**
   * Description of the event
   */
  description?: string;
  /**
   * When the event will end. An event can last a maximum of 24 hours. If the event takes place regularly, enter when the first date will end.
   */
  end?: Date;
  /**
   * The estimated expected attendance.
   */
  expectedParticipants?: number;
  /**
   * A link to an external website containing more information about the event.
   */
  externalLink?: string;
  readonly id?: number;
  /**
   * If the event is particularly suitable for children.
   */
  kidFriendly?: boolean;
  /**
   * A short, meaningful name for the event.
   */
  name: string;
  organization?: OrganizationRef;
  organizer?: OrganizerRef;
  photo?: Image;
  place?: PlaceRef;
  /**
   * When the event should have taken place before it was postponed.
   */
  previousStartDate?: Date;
  /**
   * Price information in textual form. E.g., different prices for adults and children.
   */
  priceInfo?: string;
  /**
   * If the event takes place regularly. Format: RFC 5545.
   */
  recurrenceRule?: string;
  /**
   * If the participants needs to register for the event.
   */
  registrationRequired?: boolean;
  /**
   * When the event will take place.  If the event takes place regularly, enter when the first date will begin.
   */
  start: Date;
  /**
   * Select the status of the event.
   */
  status?: Event.StatusEnum;
  /**
   * Comma separated keywords with which the event should be found. Words do not need to be entered if they are already in the name or description.
   */
  tags?: string;
  /**
   * Whether the event is particularly suitable for tourists or residents.
   */
  targetGroupOrigin?: Event.TargetGroupOriginEnum;
  /**
   * A link where tickets can be purchased.
   */
  ticketLink?: string;
  readonly updatedAt?: Date;
}
export namespace Event {
  export type AttendanceModeEnum = 'offline' | 'online' | 'mixed';
  export const AttendanceModeEnum = {
    Offline: 'offline' as AttendanceModeEnum,
    Online: 'online' as AttendanceModeEnum,
    Mixed: 'mixed' as AttendanceModeEnum,
  };
  export type StatusEnum = 'scheduled' | 'cancelled' | 'movedOnline' | 'postponed' | 'rescheduled';
  export const StatusEnum = {
    Scheduled: 'scheduled' as StatusEnum,
    Cancelled: 'cancelled' as StatusEnum,
    MovedOnline: 'movedOnline' as StatusEnum,
    Postponed: 'postponed' as StatusEnum,
    Rescheduled: 'rescheduled' as StatusEnum,
  };
  export type TargetGroupOriginEnum = 'both' | 'tourist' | 'resident';
  export const TargetGroupOriginEnum = {
    Both: 'both' as TargetGroupOriginEnum,
    Tourist: 'tourist' as TargetGroupOriginEnum,
    Resident: 'resident' as TargetGroupOriginEnum,
  };
}
